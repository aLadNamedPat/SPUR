tensor([[[[0.9863, 0.7552, 0.8894, 0.9373, 0.8973, 0.8948, 1.0000, 0.8193],
          [  -inf, 0.5354, 0.6411, 0.5946, 0.4976, 0.5158, 0.6500, 0.4226],
          [0.7987, 0.6438, 0.7112, 0.6292, 0.5070, 0.5583, 0.6819, 0.5330],
          [0.5758, 0.3446, 0.3936, 0.3410, 0.2748, 0.4109, 0.4498, 0.2328],
          [0.5940, 0.3260, 0.3553, 0.3817, 0.3540, 0.3963, 0.3719, 0.2058],
          [0.6495, 0.3615, 0.3693, 0.3395, 0.3262, 0.5145, 0.4689, 0.3343],
          [0.7046, 0.4858, 0.4820, 0.4422, 0.4668, 0.6814, 0.5604, 0.3251],
          [0.0180, 0.0376, 0.1090, 0.0000, 0.0498, 0.2861, 0.2119, 0.2019]]]],
       device='cuda:0')
tensor([[[[0.5980, 0.5622, 0.4490, 0.2547, 0.2474, 0.2733, 0.2169, 0.1985],
          [0.6147, 0.6016, 0.5970, 0.4218, 0.3149, 0.1095, 0.0252, 0.1190],
          [0.7185, 0.8627, 0.8399, 0.5387, 0.3072, 0.0000, 0.0863, 0.1985],
          [0.8710, 1.0000, 0.8656, 0.5768, 0.4436, 0.2680, 0.2924, 0.2136],
          [0.8519, 0.9534, 0.8082, 0.5232, 0.4803, 0.4452,   -inf, 0.2136],
          [0.6355, 0.8316, 0.8104, 0.4871, 0.3884, 0.3527, 0.4343, 0.2727],
          [0.6994, 0.8825, 0.9822, 0.7379, 0.4931, 0.2976, 0.2842, 0.2634],
          [0.7058, 0.8829, 0.9914, 0.8190, 0.5916, 0.4722, 0.3289, 0.2331]]]],
       device='cuda:0')
tensor([[[[0.5588, 0.3950, 0.3071, 0.4827, 0.5853, 0.4579, 0.2899, 0.2520],
          [0.5364, 0.3617, 0.2695, 0.3885, 0.4170, 0.1490, 0.0554, 0.3521],
          [0.6062, 0.7149, 0.5430, 0.2229, 0.1262, 0.0000, 0.2319, 0.6152],
          [0.7003,   -inf, 0.3776, 0.4754, 0.5959, 0.1080, 0.1777, 0.5496],
          [0.7811, 0.7910, 0.5661, 0.6493, 0.7652, 0.4433, 0.5049, 0.5838],
          [0.6982, 0.8500, 0.8645, 0.2706, 0.2021, 0.6366, 0.9419, 0.6025],
          [0.9221, 0.7251, 0.6615, 0.4464, 0.2625, 0.2791, 0.4205, 0.4496],
          [1.0000, 0.7525, 0.7157, 0.8816, 0.6791, 0.3865, 0.1707, 0.3555]]]],
       device='cuda:0')
tensor([[[[0.6046, 0.3603, 0.1644, 0.5111, 0.5365, 0.4235, 0.3280, 0.2027],
          [0.5430, 0.2823, 0.0906, 0.5863, 0.6791, 0.1215, 0.0000, 0.3961],
          [0.4900, 0.8078, 0.6285, 0.3308, 0.3348, 0.1380, 0.2360, 0.6399],
          [0.6568, 0.9041, 0.4236, 0.5893, 0.9672, 0.4266, 0.3100, 0.5742],
          [0.8323, 1.0000, 0.6257, 0.8349,   -inf, 0.5594, 0.6341, 0.5861],
          [0.6666, 0.8957, 0.7758, 0.1809, 0.0356, 0.5193, 0.8939, 0.4378],
          [0.6751, 0.6611, 0.5212, 0.3335, 0.1974, 0.2071, 0.3679, 0.3075],
          [0.5756, 0.6057, 0.6901, 0.8085, 0.6083, 0.4127, 0.1471, 0.1968]]]],
       device='cuda:0')
tensor([[[[0.7150, 0.4649, 0.2048, 0.4349, 0.5519, 0.6646, 0.5746, 0.3052],
          [0.5494, 0.2534, 0.0073, 0.4559, 0.6787, 0.1840, 0.0000, 0.5481],
          [0.5284, 0.8264, 0.6904, 0.3467, 0.3474, 0.1214, 0.1497, 0.8164],
          [0.7330, 0.8996, 0.4546, 0.6454, 0.8805, 0.4658, 0.4120, 0.6604],
          [0.8944, 0.8301, 0.5000, 0.8627, 0.8693, 0.5812, 0.7538, 0.6324],
          [0.8486, 0.7990, 0.7089, 0.2032, 0.0389, 0.6286, 1.0000, 0.5678],
          [  -inf, 0.8436, 0.5866, 0.2797, 0.2267, 0.3784, 0.5428, 0.4793],
          [0.7487, 0.8604, 0.9052, 0.8531, 0.6892, 0.6149, 0.3357, 0.3690]]]],
       device='cuda:0')
tensor([[[[0.9016, 0.6365, 0.3633, 0.6042, 0.6996, 0.7647, 0.6526, 0.4417],
          [0.7796, 0.3284, 0.0000, 0.5662, 0.7705, 0.3321, 0.2059, 0.7128],
          [0.6837, 0.9160, 0.6323, 0.2953, 0.3178, 0.1997, 0.3045, 0.9158],
          [0.7377, 0.9552, 0.4589, 0.5303, 0.8327, 0.5470, 0.5425, 0.8064],
          [1.0000, 0.9179, 0.5562, 0.7569, 0.7994, 0.6491, 0.8316, 0.7653],
          [0.9512, 0.9499, 0.8837, 0.3342, 0.1440, 0.6493, 0.9661, 0.6025],
          [0.8880, 0.9580, 0.8226, 0.5104, 0.3495, 0.4373, 0.6252, 0.5177],
          [0.6876, 0.8982,   -inf, 0.9326, 0.7147, 0.7566, 0.5176, 0.4110]]]],
       device='cuda:0')
tensor([[[[0.6892, 0.4869, 0.2733, 0.4320, 0.5206, 0.6365, 0.5179, 0.2966],
          [0.5979, 0.2764, 0.0000, 0.3334, 0.4614, 0.2703, 0.1688, 0.5334],
          [0.5930, 0.7267, 0.4351, 0.0508, 0.0303, 0.0252, 0.1452, 0.6793],
          [0.4412, 0.6597,   -inf, 0.4171, 0.6026, 0.3293, 0.3255, 0.6070],
          [0.6180, 0.6919, 0.4703, 0.5891, 0.6457, 0.5189, 0.6233, 0.6106],
          [0.8124, 0.7034, 0.5610, 0.1667, 0.1776, 0.5472, 0.7520, 0.4881],
          [0.7959, 0.7589, 0.5988, 0.3463, 0.2848, 0.3683, 0.5136, 0.4548],
          [0.6353, 0.9305, 1.0000, 0.7734, 0.4979, 0.5652, 0.3955, 0.3506]]]],
       device='cuda:0')
tensor([[[[0.8579, 0.6080, 0.3713, 0.7265, 0.7967, 0.8587, 0.7524, 0.4635],
          [0.8059, 0.3563, 0.0000, 0.6337, 0.8483, 0.5886, 0.4815, 0.8211],
          [0.8030, 0.9425, 0.5131, 0.1979, 0.2629, 0.2391, 0.3835, 1.0000],
          [0.6084, 0.8242, 0.4519, 0.6488, 0.8658, 0.4822, 0.4933, 0.8930],
          [0.7855, 0.8259, 0.5647, 0.7758, 0.9014, 0.7110, 0.8111, 0.9172],
          [0.9614, 0.9005, 0.7028, 0.2852, 0.3873, 0.7081, 0.8382, 0.6774],
          [0.9592, 0.9060, 0.6793, 0.4979, 0.4926, 0.5477, 0.6469, 0.5706],
          [0.8152,   -inf, 0.9835, 0.8232, 0.6377, 0.7969, 0.6113, 0.4866]]]],
       device='cuda:0')
tensor([[[[0.8890, 0.6093, 0.3157, 0.6789, 0.8166, 0.9458, 0.8619, 0.5657],
          [0.7540, 0.3434, 0.0000, 0.5492, 0.7773, 0.6335, 0.5066, 0.8590],
          [0.7986, 0.9497, 0.5717, 0.1111, 0.1727, 0.2737, 0.3699, 1.0000],
          [0.6320, 0.7512, 0.4423, 0.7470, 0.9695, 0.5433, 0.4949, 0.9416],
          [0.7675, 0.7251, 0.4850, 0.8390, 0.9400, 0.7523, 0.8184, 0.9362],
          [0.9748, 0.8009, 0.5641, 0.1434, 0.1505, 0.6509, 0.8753, 0.7146],
          [0.9682, 0.7472, 0.5332, 0.4528, 0.3950, 0.5556, 0.7329, 0.6645],
          [0.8015, 0.8653, 0.8436, 0.8241, 0.7292,   -inf, 0.8018, 0.6149]]]],
       device='cuda:0')
tensor([[[[0.8941, 0.6878, 0.4426, 0.7164, 0.8059, 0.9475, 0.8968, 0.6471],
          [0.7401, 0.3740, 0.0695, 0.5188, 0.7213, 0.7455, 0.6043, 0.8629],
          [0.7856, 0.8349, 0.4746, 0.0551, 0.1169, 0.4184, 0.4945, 0.9274],
          [0.6079, 0.7643, 0.5448, 0.7335, 0.9235, 0.6516, 0.5406, 0.8914],
          [0.7275, 0.8101, 0.6359, 0.7270, 0.8245, 0.8611, 0.8977, 0.9444],
          [0.9332, 0.8158, 0.6335, 0.0258, 0.0000, 0.6595, 0.9599, 0.7572],
          [1.0000, 0.7912, 0.6495, 0.4331, 0.2805, 0.4635, 0.7159, 0.7088],
          [0.8911,   -inf, 0.9502, 0.8474, 0.6687, 0.9202, 0.7907, 0.6807]]]],
       device='cuda:0')
tensor([[[[  -inf, 0.7987, 0.5318, 0.7611, 0.8521, 0.9474, 0.8928, 0.6804],
          [0.8239, 0.5223, 0.2759, 0.7025, 0.8553, 0.8056, 0.5733, 0.8208],
          [0.8117, 0.8737, 0.5957, 0.2735, 0.2920, 0.4747, 0.4541, 0.8082],
          [0.6367, 0.8450, 0.6048, 0.7951, 1.0000, 0.6950, 0.5153, 0.8197],
          [0.7717, 0.9005, 0.6864, 0.7105, 0.8303, 0.8383, 0.8078, 0.9000],
          [0.8775, 0.7928, 0.6633, 0.0691, 0.0000, 0.5726, 0.8192, 0.7054],
          [0.8651, 0.7563, 0.6832, 0.4941, 0.3120, 0.3900, 0.5986, 0.6856],
          [0.8128, 0.9095, 0.9216, 0.8717, 0.7036, 0.8703, 0.7629, 0.6962]]]],
       device='cuda:0')
tensor([[[[0.9187, 0.7603, 0.5149, 0.7281, 0.7991, 0.9352, 0.8800, 0.6502],
          [0.7464, 0.3749, 0.1035, 0.6077, 0.8580, 0.8353, 0.5449, 0.8573],
          [0.7920, 0.6169, 0.2806, 0.1285, 0.2243, 0.4935, 0.4406, 0.8206],
          [0.6273, 0.7523, 0.4912, 0.7111, 0.9026, 0.7130, 0.5448, 0.8555],
          [0.7703, 0.9849, 0.7016, 0.6250, 0.7549, 0.8526, 0.8690, 1.0000],
          [0.8249, 0.6579, 0.5373, 0.0137, 0.0000, 0.5698, 0.7919,   -inf],
          [0.7767, 0.5981, 0.5686, 0.4437, 0.2640, 0.3178, 0.5472, 0.7289],
          [0.7717, 0.9583, 0.9578, 0.8114, 0.5989, 0.8372, 0.7940, 0.7347]]]],
       device='cuda:0')
tensor([[[[0.8709, 0.7676, 0.4431, 0.6066, 0.6548, 0.6773, 0.6739, 0.5688],
          [0.7011, 0.3171, 0.0000, 0.5248, 0.7609, 0.6057, 0.3369, 0.7079],
          [0.8136, 0.6420, 0.3322, 0.2043, 0.2185, 0.2616, 0.1812, 0.6236],
          [0.6406, 0.8075, 0.6368, 0.8516, 0.9452, 0.6072, 0.4043, 0.7357],
          [0.7415, 0.9457, 0.7535, 0.7350, 0.8216, 0.8510, 0.8229, 0.8885],
          [0.7687, 0.6563, 0.5670, 0.0508, 0.0275, 0.5125, 0.7107, 0.6243],
          [0.7622, 0.6177, 0.5844, 0.4418, 0.2382, 0.2753, 0.5293, 0.7002],
          [0.8313, 1.0000,   -inf, 0.8154, 0.5652, 0.7570, 0.7265, 0.6775]]]],
       device='cuda:0')
tensor([[[[0.9365, 0.8217, 0.4750, 0.6859, 0.7223, 0.7540, 0.8100, 0.7216],
          [0.8275, 0.3620, 0.0000, 0.6288, 0.8869, 0.7920, 0.5893, 0.9501],
          [0.9893, 0.7333, 0.3612, 0.2683, 0.2634, 0.4159, 0.4027, 0.8429],
          [0.7877, 0.8498, 0.6948, 0.9756, 0.9989, 0.6916, 0.5266, 0.8519],
          [0.8459,   -inf, 0.8474, 0.9161, 0.9733, 0.9525, 0.9356, 0.9994],
          [0.8124, 0.7721, 0.6899, 0.1969, 0.1846, 0.6834, 0.9154, 0.7751],
          [0.7776, 0.6569, 0.6358, 0.5391, 0.3609, 0.4387, 0.6975, 0.7945],
          [0.8735, 1.0000, 0.9123, 0.8493, 0.6586, 0.8148, 0.7639, 0.7408]]]],
       device='cuda:0')
tensor([[[[0.9753, 0.8665, 0.5157, 0.6728, 0.7392, 0.8426, 0.9495, 0.8739],
          [0.8752, 0.3560, 0.0415, 0.6609, 0.9324, 0.9017, 0.7252,   -inf],
          [1.0000, 0.6217, 0.3701, 0.2961, 0.2068, 0.5076, 0.5229, 0.9857],
          [0.8430, 0.6741, 0.5886, 0.8140, 0.7822, 0.8135, 0.6527, 0.8147],
          [0.8927, 0.8324, 0.6551, 0.7574, 0.8081, 0.9778, 0.9687, 0.9238],
          [0.7955, 0.7073, 0.6444, 0.1101, 0.0000, 0.5942, 0.9672, 0.8672],
          [0.7306, 0.6399, 0.6563, 0.4358, 0.2034, 0.3377, 0.7238, 0.9329],
          [0.8000, 0.9055, 0.8484, 0.7809, 0.6378, 0.7244, 0.7553, 0.8786]]]],
       device='cuda:0')
tensor([[[[0.9656, 0.9332, 0.5619, 0.5863, 0.6157, 0.7077, 0.8252, 0.8112],
          [0.7921, 0.3448, 0.0127, 0.5516, 0.8382, 0.7804, 0.6341,   -inf],
          [0.9661, 0.6217, 0.4337, 0.3058, 0.1076, 0.2933, 0.3336, 0.8667],
          [0.8339, 0.7092, 0.7656, 1.0000, 0.8031, 0.7451, 0.5858, 0.7218],
          [0.8352, 0.8637, 0.8035, 0.9754, 0.8913, 0.9514, 0.9418, 0.8013],
          [0.7392, 0.7952, 0.7844, 0.1485, 0.0000, 0.5298, 0.8826, 0.7394],
          [0.7641, 0.7263, 0.7777, 0.5451, 0.2886, 0.3813, 0.7139, 0.8483],
          [0.8956, 0.9910, 0.9630, 0.9901, 0.7446, 0.7015, 0.6869, 0.7883]]]],
       device='cuda:0')
tensor([[[[0.9207, 0.9454, 0.5830, 0.6278, 0.5816, 0.5964, 0.7242, 0.7503],
          [0.7924, 0.4141, 0.0000, 0.4810, 0.7232, 0.7103, 0.5876, 0.9541],
          [0.9601, 0.7286, 0.4282, 0.2092, 0.0619, 0.2300, 0.2979, 0.7904],
          [0.6937, 0.7303, 0.7212,   -inf, 0.9271, 0.7188, 0.5356, 0.7636],
          [0.6726, 0.8055, 0.7365, 0.9224, 0.9517, 1.0000, 0.9246, 0.7965],
          [0.7123, 0.7783, 0.7093, 0.1525, 0.0460, 0.5374, 0.8454, 0.6652],
          [0.6911, 0.6526, 0.6517, 0.4803, 0.2918, 0.3725, 0.6894, 0.8146],
          [0.7392, 0.8248, 0.8108, 0.7938, 0.5836, 0.6102, 0.6221, 0.7557]]]],
       device='cuda:0')
tensor([[[[  -inf, 0.9151, 0.5391, 0.6674, 0.6125, 0.5872, 0.7668, 0.8678],
          [0.9265, 0.5094, 0.0913, 0.6852, 0.9405, 0.8550, 0.6273, 0.9512],
          [1.0000, 0.7642, 0.4583, 0.3486, 0.2819, 0.4616, 0.4012, 0.7103],
          [0.7122, 0.6603, 0.5632, 0.7807, 0.8106, 0.7682, 0.6607, 0.8200],
          [0.7615, 0.7618, 0.5454, 0.6364, 0.7613, 0.9058, 0.9207, 0.8910],
          [0.8102, 0.7487, 0.6375, 0.1153, 0.0000, 0.4389, 0.7451, 0.7085],
          [0.7101, 0.6505, 0.6447, 0.4074, 0.2201, 0.3338, 0.6792, 0.8822],
          [0.6245, 0.7865, 0.7159, 0.5979, 0.5243, 0.6411, 0.6987, 0.8480]]]],
       device='cuda:0')
tensor([[[[0.8575, 0.8336, 0.5138, 0.6102, 0.6142, 0.6030, 0.7123, 0.7573],
          [0.7878, 0.4606, 0.1378, 0.6446, 0.8709, 0.8088, 0.6152, 0.8131],
          [0.8281, 0.6568, 0.4682, 0.4019, 0.3444, 0.4635, 0.4188, 0.6926],
          [0.7040, 0.7077, 0.6434, 0.7432, 0.7002, 0.6560, 0.6117, 0.7744],
          [0.7864, 0.7857, 0.6305, 0.6714, 0.6861, 0.8359, 0.9064, 0.7949],
          [0.8250, 0.7073, 0.6719, 0.1862, 0.0000, 0.4715, 0.8505, 0.7556],
          [0.7988, 0.7023, 0.7161, 0.4515, 0.2431, 0.3818, 0.7729, 1.0000],
          [0.7312,   -inf, 0.8357, 0.7462, 0.6682, 0.7373, 0.7885, 0.9150]]]],
       device='cuda:0')
tensor([[[[0.7779, 0.8576, 0.5222, 0.4364, 0.4600, 0.4447, 0.4639, 0.4950],
          [0.5657, 0.4951, 0.2634, 0.5390, 0.7078, 0.5316, 0.2776, 0.4968],
          [0.6379, 0.7361, 0.7120, 0.4720, 0.2434, 0.0814, 0.0021, 0.4023],
          [0.5673, 0.8404, 0.8461, 0.8644, 0.6982, 0.4183, 0.3622, 0.5857],
          [0.6600, 0.9469, 0.9191, 0.8800, 0.7471, 0.7822, 0.8656, 0.6134],
          [0.5973, 0.7321, 0.8308, 0.2361, 0.0000, 0.5435,   -inf, 0.6424],
          [0.6424, 0.6502, 0.6779, 0.4423, 0.2634, 0.4517, 0.8706, 1.0000],
          [0.8012, 0.9450, 0.9495, 0.8868, 0.6729, 0.6175, 0.6408, 0.7798]]]],
       device='cuda:0')
tensor([[[[0.8867,   -inf, 0.4945, 0.4386, 0.4004, 0.3050, 0.4425, 0.6002],
          [0.7922, 0.4373, 0.0070, 0.5471, 0.7683, 0.4749, 0.2651, 0.6530],
          [0.8369, 0.7844, 0.5138, 0.3299, 0.1579, 0.0103, 0.0000, 0.4869],
          [0.6211, 0.9220, 0.8342, 0.7847, 0.6097, 0.3845, 0.3920, 0.6033],
          [0.7294, 0.9576, 0.8165, 0.7611, 0.7093, 0.6483, 0.7032, 0.6072],
          [0.6766, 0.7434, 0.7772, 0.1816, 0.0282, 0.2789, 0.5191, 0.4717],
          [0.6267, 0.7051, 0.8005, 0.4981, 0.2516, 0.2322, 0.4891, 0.6741],
          [0.7138, 1.0000, 0.9929, 0.8220, 0.5695, 0.5085, 0.5073, 0.6428]]]],
       device='cuda:0')
tensor([[[[0.8628, 0.9344, 0.5592, 0.4997, 0.4571, 0.3344, 0.4459, 0.6498],
          [0.8340, 0.4394, 0.0000, 0.5355, 0.7480, 0.5347, 0.3728, 0.7170],
          [0.8664, 0.6762, 0.4173, 0.3116, 0.1431, 0.0568, 0.1124, 0.5925],
          [0.6792, 0.8260, 0.8052, 0.7620, 0.5312, 0.4159, 0.4807, 0.6791],
          [0.7597, 0.8337, 0.7472, 0.7464, 0.7094, 0.7575, 0.8230, 0.6656],
          [0.7268, 0.6639, 0.7380, 0.2415, 0.0971, 0.3737, 0.6762, 0.5878],
          [0.7230, 0.7293, 0.8434, 0.5232, 0.2593, 0.2441, 0.5857, 0.7773],
          [0.7789,   -inf, 1.0000, 0.7928, 0.5856, 0.5127, 0.5435, 0.7523]]]],
       device='cuda:0')
tensor([[[[0.8227,   -inf, 0.6199, 0.6870, 0.6896, 0.5231, 0.6599, 0.9113],
          [0.8826, 0.5736, 0.1732, 0.7207, 1.0000, 0.8721, 0.6072, 0.9019],
          [0.7728, 0.5900, 0.4052, 0.4599, 0.4218, 0.4478, 0.3682, 0.6907],
          [0.6289, 0.6648, 0.6584, 0.7969, 0.7624, 0.6956, 0.6528, 0.8735],
          [0.7741, 0.7770, 0.6072, 0.6398, 0.7441, 0.8618, 0.9157, 0.9281],
          [0.8314, 0.6719, 0.6485, 0.1444, 0.0000, 0.3904, 0.7262, 0.7561],
          [0.7433, 0.6754, 0.7704, 0.4559, 0.2576, 0.3382, 0.6828, 0.9075],
          [0.5917, 0.7737, 0.7700, 0.6089, 0.5934, 0.6595, 0.7222, 0.9514]]]],
       device='cuda:0')
tensor([[[[0.6844, 0.7739, 0.5468, 0.5966, 0.6477, 0.6758, 0.6881, 0.6704],
          [0.6983, 0.6194, 0.3164, 0.6257, 0.8630, 1.0000, 0.7641, 0.6915],
          [0.5183, 0.4982, 0.3865, 0.3326, 0.2547, 0.3797, 0.4459, 0.6893],
          [0.4171, 0.4869, 0.4480, 0.5238, 0.4915, 0.5284, 0.6043, 0.8490],
          [0.6089, 0.7241, 0.5641, 0.5023, 0.5533, 0.7585, 0.9069, 0.8941],
          [0.6530, 0.5170, 0.4603, 0.0911, 0.0000, 0.4631, 0.8698, 0.8130],
          [0.4774,   -inf, 0.3909, 0.2459, 0.2134, 0.3823, 0.7850, 0.9963],
          [0.3240, 0.5085, 0.5388, 0.3912, 0.4006, 0.4712, 0.6425, 0.9054]]]],
       device='cuda:0')
tensor([[[[0.8861, 1.0000, 0.6887, 0.6590, 0.7012, 0.6322, 0.6549, 0.8401],
          [  -inf, 0.8625, 0.5286, 0.7278, 0.7428, 0.9167, 0.8287, 0.8209],
          [0.7359, 0.6616, 0.5668, 0.5577, 0.3543, 0.3644, 0.5224, 0.8035],
          [0.6768, 0.5707, 0.4569, 0.6312, 0.6736, 0.5156, 0.5863, 0.9534],
          [0.8778, 0.7157, 0.4702, 0.4180, 0.6003, 0.7112, 0.7413, 0.9130],
          [0.7637, 0.6642, 0.6710, 0.1702, 0.0000, 0.3405, 0.6332, 0.7118],
          [0.5567, 0.5246, 0.6849, 0.5570, 0.3848, 0.3776, 0.6223, 0.7993],
          [0.4486, 0.4548, 0.5207, 0.6098, 0.7119, 0.6371, 0.6513, 0.9125]]]],
       device='cuda:0')
tensor([[[[0.8164, 0.9045, 0.5814, 0.6532, 0.7451, 0.7455, 0.7666, 0.9102],
          [1.0000, 0.7975, 0.4735, 0.7082, 0.6309, 0.8509, 0.8250, 0.8091],
          [0.7435, 0.6612, 0.5583, 0.5762, 0.2542, 0.2225, 0.4416, 0.7663],
          [0.7280, 0.5817, 0.4406, 0.7766, 0.8189, 0.5375, 0.5346, 0.9095],
          [0.9280, 0.7027, 0.4622, 0.4699, 0.6820, 0.8753, 0.8610, 0.8683],
          [0.7465, 0.6986, 0.7724, 0.2013, 0.0000, 0.4818, 0.8597, 0.7909],
          [0.5860, 0.5949, 0.7994, 0.6281, 0.4063, 0.3714, 0.7300, 0.9576],
          [0.5272, 0.5032, 0.5830, 0.6295, 0.7407, 0.6332, 0.6310,   -inf]]]],
       device='cuda:0')
tensor([[[[0.7420, 0.7381, 0.5028, 0.5289, 0.5872, 0.6279, 0.5712, 0.4826],
          [0.7907, 0.6596, 0.4421, 0.6078, 0.5729, 0.6568, 0.6814, 0.5987],
          [0.8025, 0.9709, 0.8253, 0.5393, 0.1317, 0.0000, 0.3377, 0.8322],
          [0.8140, 0.9242, 0.7522, 0.9583, 0.7383, 0.2821, 0.3580, 0.7356],
          [0.8736, 0.8927, 0.8234, 0.9477, 0.9455, 0.8842, 0.8516, 0.6443],
          [0.6245, 0.8189, 1.0000, 0.4497, 0.3992, 0.8034,   -inf, 0.8153],
          [0.6708, 0.7320, 0.8690, 0.6290, 0.5399, 0.6182, 0.8700, 0.9058],
          [0.9092, 0.9257, 0.9822, 0.9192, 0.7559, 0.5906, 0.4765, 0.6329]]]],
       device='cuda:0')
tensor([[[[0.4375, 0.5665, 0.2883, 0.4042, 0.4830, 0.4221, 0.4438, 0.4839],
          [0.6284, 0.5350, 0.2468, 0.4532, 0.4230, 0.7109, 0.7474, 0.5391],
          [0.5988, 0.6096, 0.4082, 0.3420, 0.0000, 0.0279, 0.3858, 0.6782],
          [0.6532, 0.4942, 0.3325, 0.6547, 0.6229, 0.4545, 0.5213, 0.6932],
          [0.6477, 0.4316, 0.3604, 0.5665, 0.7692, 0.8517, 0.8564, 0.7109],
          [0.5418, 0.6808,   -inf, 0.4760, 0.2608, 0.3293, 0.7053, 0.7587],
          [0.5850, 0.7455, 1.0000, 0.6078, 0.3853, 0.2371, 0.4756, 0.7284],
          [0.5881, 0.6771, 0.6848, 0.5093, 0.5129, 0.2915, 0.2327, 0.5866]]]],
       device='cuda:0')
tensor([[[[0.6797, 0.7286, 0.4544, 0.4308, 0.5259, 0.6106, 0.5593, 0.4167],
          [0.6089, 0.6140, 0.4014, 0.6209, 0.5910, 0.5875, 0.7332, 0.6231],
          [0.5495, 0.8992, 0.8118, 0.5583, 0.1642, 0.0000, 0.4387,   -inf],
          [0.6791, 0.9339, 0.7428, 0.8584, 0.6929, 0.3783, 0.4559, 0.7122],
          [0.7248, 0.8576, 0.7928, 1.0000, 0.9904, 0.7744, 0.6895, 0.5465],
          [0.3899, 0.6112, 0.7757, 0.4428, 0.4849, 0.6191, 0.8158, 0.7986],
          [0.4252, 0.4839, 0.5757, 0.4767, 0.5794, 0.6596, 0.7498, 0.7841],
          [0.6965, 0.7314, 0.7539, 0.7947, 0.7550, 0.6310, 0.4313, 0.5085]]]],
       device='cuda:0')
tensor([[[[0.6058, 0.5806, 0.4319, 0.5558, 0.6239, 0.4847, 0.4697, 0.5356],
          [0.5844, 0.4925, 0.3930, 0.5507, 0.4471, 0.6198, 0.6555, 0.4627],
          [0.5499, 0.5028, 0.3903, 0.3780, 0.1067, 0.2203, 0.4615, 0.5189],
          [0.5494, 0.3243, 0.2315, 0.4634, 0.5291, 0.6118, 0.5958, 0.6225],
          [0.6047, 0.4472, 0.3232, 0.3713, 0.5433, 0.8109, 0.8276, 0.6969],
          [0.6623, 0.4437, 0.4837, 0.1844, 0.0000, 0.2847, 0.7728, 0.8811],
          [0.5234, 0.3490, 0.4937, 0.3596, 0.2155, 0.2393, 0.6674, 1.0000],
          [0.4069, 0.4780, 0.4508, 0.3377,   -inf, 0.4556, 0.5607, 0.8335]]]],
       device='cuda:0')
tensor([[[[0.8101, 0.9946, 0.7975, 0.7195, 0.7236, 0.6188, 0.6598, 0.7347],
          [0.7089, 0.6996, 0.4428, 0.7244, 0.7127, 0.8079, 0.9292, 0.8037],
          [0.6228, 0.8523, 0.7662, 0.6747, 0.1493, 0.0292, 0.4419, 0.8583],
          [0.8735, 0.9389, 0.7941, 0.9749, 0.9214, 0.7828, 0.6757, 0.6862],
          [0.8948, 0.9737, 0.7371, 0.8879, 1.0000, 0.9455, 0.8517, 0.5899],
          [0.5838, 0.6085, 0.7095, 0.3142, 0.0419, 0.0000, 0.4627, 0.8086],
          [0.5607, 0.5362, 0.7483, 0.4533, 0.3616, 0.2507, 0.5570, 0.9131],
          [0.6573, 0.9357,   -inf, 0.7837, 0.9105, 0.7888, 0.7431, 0.8994]]]],
       device='cuda:0')
tensor([[[[0.8447, 0.9662, 0.8233, 0.8111, 0.8246, 0.7391, 0.7683, 0.8287],
          [0.9278, 0.8370,   -inf, 0.8707, 0.7876, 0.8720, 0.9256, 0.8039],
          [0.8718, 0.9357, 0.7572, 0.7014, 0.3746, 0.4037, 0.6441, 0.8125],
          [0.9051, 0.8603, 0.7024, 0.7664, 0.6861, 0.7439, 0.7500, 0.8470],
          [0.8798, 0.7772, 0.6490, 0.6350, 0.5835, 0.8238, 0.9601, 0.8626],
          [0.7557, 0.6091, 0.6461, 0.3065, 0.0000, 0.3202, 0.7218, 0.7204],
          [0.7423, 0.6171, 0.7525, 0.5560, 0.4296, 0.4599, 0.6200, 0.7515],
          [0.7294, 0.8270, 0.9121, 0.8798, 0.9766, 0.8980, 0.9013, 1.0000]]]],
       device='cuda:0')
tensor([[[[0.8128, 0.9375, 0.7480, 0.7136, 0.7571, 0.8301, 0.7243, 0.4847],
          [0.8224, 0.7167, 0.3333, 0.8440, 0.8917, 0.6995, 0.6836, 0.6922],
          [0.5493,   -inf, 0.6392, 0.5029, 0.1873, 0.0750, 0.4496, 1.0000],
          [0.5035, 0.7575, 0.5354, 0.6238, 0.4874, 0.5515, 0.7122, 0.8637],
          [0.5525, 0.5261, 0.4010, 0.6901, 0.6176, 0.7888, 0.9880, 0.7325],
          [0.3458, 0.3812, 0.4029, 0.0653, 0.0000, 0.4550, 0.9153, 0.7674],
          [0.3955, 0.3886, 0.3604, 0.0632, 0.1844, 0.4635, 0.7447, 0.8497],
          [0.4380, 0.4947, 0.6221, 0.5654, 0.6400, 0.6760, 0.6161, 0.7329]]]],
       device='cuda:0')
tensor([[[[5.4106e-01, 6.2267e-01, 5.2824e-01, 5.1666e-01, 6.7092e-01,
           8.1778e-01, 6.3777e-01, 4.4682e-01],
          [5.1150e-01, 4.4052e-01, 1.8868e-01, 5.3047e-01, 6.2546e-01,
           6.0752e-01, 6.0942e-01, 6.9546e-01],
          [3.9383e-01, 6.6337e-01, 5.3900e-01, 3.5393e-01, 4.3344e-05,
           0.0000e+00, 4.3051e-01, 1.0000e+00],
          [3.6044e-01, 4.2479e-01, 3.5766e-01, 5.2319e-01, 3.2892e-01,
           4.2817e-01, 6.0302e-01, 7.4434e-01],
          [3.6550e-01, 2.1416e-01, 1.9239e-01, 6.8485e-01, 6.1275e-01,
           6.2494e-01, 7.2625e-01, 5.3559e-01],
          [2.3632e-01, 3.5699e-01, 3.9383e-01, 1.8069e-01, 1.3493e-01,
           3.1883e-01, 7.4002e-01, 7.4685e-01],
          [3.8726e-01, 4.0420e-01, 3.8093e-01, 9.1604e-02, 1.7113e-01,
           2.9541e-01, 5.6917e-01,       -inf],
          [5.4513e-01, 5.2345e-01, 6.1016e-01, 6.2394e-01, 6.6660e-01,
           5.2750e-01, 4.1467e-01, 5.9679e-01]]]], device='cuda:0')
tensor([[[[0.7343, 0.9411, 0.9141, 0.8147, 0.8381, 0.5445, 0.5183, 0.7203],
          [0.9022, 1.0000,   -inf, 0.8104, 0.7119, 0.7302, 0.7110, 0.7062],
          [0.8834, 0.8066, 0.7458, 0.6810, 0.4775, 0.6571, 0.5889, 0.4968],
          [0.8801, 0.4683, 0.4779, 0.6421, 0.7125, 0.7847, 0.4720, 0.4880],
          [0.6636, 0.4344, 0.4095, 0.6591, 0.6698, 0.5589, 0.4288, 0.4460],
          [0.4902, 0.4730, 0.5114, 0.4698, 0.1315, 0.0000, 0.2488, 0.3541],
          [0.6078, 0.5332, 0.6693, 0.6043, 0.3092, 0.0305, 0.1249, 0.3655],
          [0.6620, 0.7005, 0.6479, 0.7778, 0.8425, 0.5793, 0.5340, 0.6778]]]],
       device='cuda:0')
tensor([[[[0.5790, 0.7218, 0.6628, 0.5498, 0.7248, 0.6306, 0.4891, 0.6171],
          [0.6598, 0.6228, 0.5674, 0.5245, 0.5173, 0.6786, 0.6111, 0.6387],
          [0.6555, 0.5249, 0.5078, 0.4322, 0.1897, 0.4754, 0.4840, 0.5119],
          [0.6271, 0.2246, 0.2534, 0.4493, 0.4665, 0.7613, 0.6790, 0.7495],
          [0.4801, 0.1772, 0.2127, 0.5433, 0.5395, 0.7495, 0.8664, 0.7985],
          [0.3850, 0.3619, 0.4629, 0.3752, 0.0000, 0.2783, 0.7253, 0.6361],
          [0.5423, 0.5001, 0.6903, 0.5659, 0.2650, 0.2242, 0.4941, 0.7769],
          [0.6492, 0.5998, 0.6854, 0.8750,   -inf, 0.7751, 0.7844, 1.0000]]]],
       device='cuda:0')
tensor([[[[0.5271, 0.6441, 0.3685, 0.2694, 0.3292, 0.4462, 0.3380, 0.0867],
          [0.4674, 0.5280, 0.2791, 0.6265, 0.6833, 0.4073, 0.4245, 0.3715],
          [0.2801, 0.7415, 0.7497, 0.5984, 0.3672, 0.0568, 0.2881, 0.7138],
          [0.3005, 0.6065, 0.5317, 0.7300, 0.7394, 0.5888, 0.6207, 0.6216],
          [0.3468, 0.4895, 0.4313, 1.0000,   -inf, 0.8154, 0.7893, 0.5039],
          [0.0000, 0.5018, 0.6271, 0.5445, 0.5847, 0.5697, 0.8030, 0.6724],
          [0.2297, 0.3765, 0.3747, 0.2927, 0.4595, 0.6216, 0.6873, 0.6394],
          [0.6750, 0.4873, 0.4610, 0.6620, 0.6036, 0.4982, 0.2453, 0.2314]]]],
       device='cuda:0')
tensor([[[[0.6344, 0.7355, 0.4207, 0.3286, 0.4112, 0.5891, 0.4810, 0.1759],
          [0.6137, 0.5839, 0.2348, 0.7566, 0.8934, 0.5560, 0.5648, 0.5545],
          [0.3644, 0.8438, 0.7578, 0.5821, 0.3800, 0.0917, 0.3785,   -inf],
          [0.4039, 0.7522, 0.5901, 0.7097, 0.6830, 0.6897, 0.7797, 0.7626],
          [0.5047, 0.6179, 0.4780, 1.0000, 0.9936, 0.8495, 0.9426, 0.6199],
          [0.0000, 0.5591, 0.7069, 0.4582, 0.4405, 0.4919, 0.9033, 0.8461],
          [0.2077, 0.4169, 0.4660, 0.2614, 0.3673, 0.5298, 0.7649, 0.8465],
          [0.7280, 0.5590, 0.5768, 0.7310, 0.6285, 0.5301, 0.2934, 0.2823]]]],
       device='cuda:0')
tensor([[[[0.5792, 0.8201, 0.7260, 0.6363, 0.6866, 0.8398, 0.9692, 0.8916],
          [0.9269, 0.6750, 0.3001, 0.6929, 0.9056, 0.8591, 0.9324, 1.0000],
          [0.7641, 0.6848, 0.3971, 0.4300, 0.3839, 0.5295, 0.7526,   -inf],
          [0.5356, 0.4205, 0.3562, 0.4208, 0.3378, 0.7872, 0.7626, 0.6839],
          [0.5377, 0.2057, 0.1826, 0.5300, 0.3693, 0.6019, 0.6650, 0.5008],
          [0.2987, 0.3688, 0.5021, 0.2609, 0.0000, 0.1750, 0.6372, 0.6610],
          [0.4933, 0.4969, 0.5773, 0.1692, 0.0264, 0.1641, 0.4881, 0.7144],
          [0.5818, 0.3731, 0.4729, 0.5506, 0.4868, 0.3694, 0.3926, 0.5663]]]],
       device='cuda:0')
tensor([[[[0.2613, 0.4436, 0.3935, 0.3772, 0.4438, 0.6434, 0.7584, 0.5937],
          [0.6152, 0.4009, 0.0000, 0.4619, 0.7324, 0.6305, 0.7301, 0.8389],
          [0.5264, 0.5561, 0.2153, 0.1785, 0.1572, 0.2823, 0.5959, 0.9484],
          [0.4421, 0.4281, 0.2923, 0.3693, 0.2531, 0.7462, 0.8070, 0.7127],
          [0.4424, 0.2564, 0.2462, 0.7584, 0.5789, 0.7078, 0.8223, 0.5729],
          [0.1321, 0.3766, 0.5558, 0.3146, 0.1261, 0.3164,   -inf, 0.9234],
          [0.4056, 0.4713, 0.5711, 0.1177, 0.0506, 0.3095, 0.8191, 1.0000],
          [0.5113, 0.3185, 0.5048, 0.5702, 0.5006, 0.4085, 0.3837, 0.5153]]]],
       device='cuda:0')
tensor([[[[0.6763, 0.8124, 0.5542, 0.4740, 0.5707, 0.8065, 0.7898, 0.4111],
          [0.9624, 0.7413, 0.2643, 0.8240,   -inf, 0.7189, 0.7422, 0.6763],
          [0.6834, 0.9552, 0.6432, 0.4416, 0.3233, 0.1780, 0.4551, 0.8826],
          [0.5368, 0.7987, 0.5380, 0.4967, 0.3871, 0.6359, 0.7173, 0.6524],
          [0.5153, 0.4649, 0.3141, 0.8126, 0.7483, 0.7680, 0.8816, 0.5536],
          [0.0000, 0.3160, 0.4684, 0.3544, 0.3202, 0.4347, 1.0000, 0.8934],
          [0.2927, 0.3224, 0.4122, 0.1654, 0.1609, 0.4174, 0.8378, 0.8532],
          [0.6564, 0.4330, 0.5604, 0.6381, 0.4493, 0.3977, 0.2992, 0.2887]]]],
       device='cuda:0')
tensor([[[[0.5411, 0.7448, 0.5578, 0.5213, 0.6086, 0.8182, 0.7768, 0.4038],
          [0.8112, 0.6961, 0.2918, 0.8365, 1.0000, 0.7906, 0.8583, 0.6814],
          [0.5858, 0.8841, 0.6706, 0.5342, 0.4320, 0.3227, 0.5683, 0.9200],
          [0.4764, 0.7678, 0.6670, 0.7018, 0.6281, 0.8646, 0.8862, 0.7677],
          [0.4735, 0.4941, 0.4291, 0.9781, 0.9780,   -inf, 0.9922, 0.5961],
          [0.0000, 0.4368, 0.6053, 0.5252, 0.4829, 0.4703, 0.8823, 0.8300],
          [0.3248, 0.4782, 0.5542, 0.2885, 0.2381, 0.3949, 0.7776, 0.8723],
          [0.7130, 0.4786, 0.5511, 0.6658, 0.4863, 0.4038, 0.2969, 0.2886]]]],
       device='cuda:0')
tensor([[[[0.2219, 0.2793, 0.3273, 0.4826, 0.6465, 0.4971, 0.5200,   -inf],
          [0.3220, 0.5149, 0.6396, 0.6611, 0.6976, 0.7575, 0.6671, 0.6461],
          [0.3226, 0.5201, 0.6159, 0.5585, 0.5669, 0.6937, 0.4561, 0.2438],
          [0.6859, 0.6301, 0.6268, 0.6606, 0.8084, 0.7737, 0.5352, 0.5571],
          [0.6758, 0.8119, 0.7002, 0.6158, 0.4741, 0.4703, 0.5592, 0.6037],
          [0.8247, 0.8696, 0.7170, 0.4729, 0.0000, 0.1303, 0.4214, 0.3307],
          [0.9590, 1.0000, 0.9407, 0.7041, 0.4399, 0.1390, 0.2711, 0.3727],
          [0.5058, 0.7739, 0.6452, 0.4270, 0.6872, 0.5203, 0.5452, 0.6366]]]],
       device='cuda:0')
tensor([[[[0.0139, 0.0641, 0.1318, 0.2744, 0.2945, 0.0283, 0.1071, 0.4542],
          [0.1908, 0.3430, 0.4609, 0.4186, 0.2827, 0.3750, 0.3754, 0.3295],
          [0.2142, 0.3490, 0.3840, 0.4737, 0.4034, 0.3923, 0.2061, 0.0000],
          [0.6666, 0.6569, 0.4882, 0.6605, 0.8186, 0.4667, 0.3009, 0.4493],
          [0.7035, 0.9873, 0.7353, 0.5031, 0.3921, 0.2968, 0.4276, 0.6610],
          [0.9241, 0.9209, 0.6191, 0.5066, 0.1303, 0.1441, 0.3760, 0.3411],
          [1.0000,   -inf, 0.9287, 0.8976, 0.7441, 0.3056, 0.3612, 0.3459],
          [0.3117, 0.8324, 0.7160, 0.5214, 0.8711, 0.7055, 0.7099, 0.6527]]]],
       device='cuda:0')
tensor([[[[0.2959, 0.3758, 0.3616, 0.4278, 0.5407, 0.2038, 0.2469, 0.7446],
          [0.3531, 0.3926, 0.4676, 0.4551, 0.3945, 0.5415, 0.4547, 0.5261],
          [0.2821, 0.2319, 0.2766, 0.2899, 0.2269, 0.5361, 0.3261, 0.1490],
          [0.3588, 0.1114, 0.2161, 0.6081, 0.8247, 0.7474, 0.5563, 0.6986],
          [0.2883, 0.3745, 0.4028, 0.4660, 0.5495, 0.6110, 0.7057, 0.8966],
          [0.4033, 0.5131, 0.5096, 0.3795, 0.0000, 0.2112, 0.5251, 0.4206],
          [0.5755, 0.6111, 0.7685, 0.7508, 0.5134, 0.1770, 0.3252, 0.4496],
          [0.2694, 0.3902, 0.5279, 0.5876,   -inf, 0.7725, 0.8437, 1.0000]]]],
       device='cuda:0')
tensor([[[[0.3790, 0.6976, 0.6507, 0.5760, 0.7366, 0.4574, 0.3223, 0.6066],
          [0.6056, 0.7058, 0.6521, 0.6086, 0.5889, 0.4522, 0.1756, 0.3517],
          [0.5154, 0.4909, 0.5339, 0.6327, 0.4955, 0.7320, 0.3244, 0.0000],
          [0.4222, 0.3072, 0.5132, 0.6173, 0.6519, 1.0000, 0.6331, 0.3560],
          [0.2736, 0.3072, 0.4453, 0.5211, 0.4496, 0.5991, 0.5215, 0.3732],
          [0.2194, 0.4877, 0.6185, 0.6079, 0.2271, 0.1955, 0.4570, 0.2870],
          [0.4752, 0.6044,   -inf, 0.6153, 0.4058, 0.1126, 0.3076, 0.3942],
          [0.3803, 0.3892, 0.3759, 0.4449, 0.6422, 0.4473, 0.4752, 0.5480]]]],
       device='cuda:0')
tensor([[[[0.6660, 0.8835, 0.9137, 0.8613, 0.9287, 0.6364, 0.5550, 0.9464],
          [0.9872, 0.8158, 0.7177, 0.8061, 0.6780, 0.5495, 0.3029, 0.7103],
          [0.8360, 0.6724, 0.5339, 0.6480, 0.4419, 0.7522, 0.4312, 0.3960],
          [0.6680, 0.4047, 0.4270, 0.5653, 0.7232,   -inf, 0.6239, 0.5724],
          [0.4536, 0.5008, 0.4970, 0.4699, 0.4318, 0.5329, 0.3894, 0.3798],
          [0.4684, 0.8312, 0.8273, 0.6324, 0.1969, 0.1433, 0.4026, 0.2412],
          [0.7810, 0.8691, 1.0000, 0.6763, 0.3292, 0.0000, 0.1537, 0.1971],
          [0.4840, 0.5415, 0.7448, 0.4969, 0.4783, 0.4204, 0.3850, 0.4015]]]],
       device='cuda:0')
tensor([[[[0.0000, 0.2404, 0.4044, 0.6111, 0.7028, 0.5847, 0.5757, 0.6691],
          [0.2684, 0.7044, 0.9480, 0.9164, 0.7697, 0.8841, 0.7479, 0.5463],
          [0.3313, 0.6437, 0.7632, 0.8859, 0.7843, 0.7589, 0.6098, 0.3641],
          [0.7117, 0.7980, 0.7434,   -inf, 1.0000, 0.7263, 0.5691, 0.5908],
          [0.6188, 0.8969, 0.8285, 0.7527, 0.6229, 0.5679, 0.5748, 0.5601],
          [0.7084, 0.7511, 0.6568, 0.6435, 0.3061, 0.3036, 0.5042, 0.3512],
          [0.8324, 0.8280, 0.7846, 0.8465, 0.6390, 0.3036, 0.3563, 0.2848],
          [0.3472, 0.6297, 0.5484, 0.4759, 0.5752, 0.4612, 0.3815, 0.2270]]]],
       device='cuda:0')
tensor([[[[0.0000, 0.1532, 0.2810, 0.4435, 0.5177, 0.3558, 0.3293, 0.4676],
          [0.2241, 0.5414, 0.7271, 0.6769, 0.5447, 0.6049, 0.4631, 0.3795],
          [0.2844, 0.5044, 0.5167, 0.4934, 0.3935, 0.4836, 0.3263, 0.1859],
          [0.5609, 0.4955, 0.3509, 0.6066, 0.6972, 0.4341, 0.3321, 0.4392],
          [0.5090, 0.7922, 0.6814, 0.6532, 0.5413, 0.4125, 0.4958, 0.5696],
          [0.5846, 0.7471, 0.7206, 0.6808, 0.3315, 0.3492, 0.5739, 0.3607],
          [0.7512, 0.7111,   -inf, 1.0000, 0.7796, 0.4017, 0.4261, 0.2899],
          [0.3989, 0.5976, 0.6509, 0.6589, 0.7712, 0.5961, 0.4628, 0.3309]]]],
       device='cuda:0')
tensor([[[[0.5240, 0.7390, 0.8016, 0.6560, 0.9859,   -inf, 0.8548, 0.9372],
          [0.7448, 0.4188, 0.3707, 0.5071, 0.5517, 0.6722, 0.5717, 0.8627],
          [0.6779, 0.3494, 0.2570, 0.3262, 0.0000, 0.4598, 0.4796, 0.6702],
          [0.7484, 0.1312, 0.1905, 0.4872, 0.3841, 0.9697, 0.9489, 1.0000],
          [0.5498, 0.2612, 0.1344, 0.5526, 0.5677, 0.7387, 0.8608, 0.8317],
          [0.1152, 0.3938, 0.3260, 0.3603, 0.2130, 0.3166, 0.7702, 0.5907],
          [0.3393, 0.3867, 0.6104, 0.3286, 0.2571, 0.2582, 0.5927, 0.7782],
          [0.4869, 0.4842, 0.6739, 0.5775, 0.7552, 0.7400, 0.7524, 0.9121]]]],
       device='cuda:0')
tensor([[[[0.5667, 0.7103, 0.5773, 0.5439, 0.7003,   -inf, 0.9578, 0.5097],
          [0.8607, 0.4956, 0.0519, 0.5054, 0.6738, 0.7353, 0.8231, 0.6606],
          [0.5776, 0.5014, 0.2557, 0.3905, 0.2427, 0.2860, 0.6078, 0.9609],
          [0.4846, 0.5094, 0.5029, 0.5599, 0.3601, 0.9061, 0.9507, 0.7415],
          [0.5342, 0.4263, 0.3117, 0.7431, 0.7818, 1.0000, 0.8355, 0.4939],
          [0.0000, 0.5012, 0.6144, 0.5452, 0.6641, 0.4712, 0.7177, 0.8005],
          [0.2996, 0.5792, 0.7615, 0.2617, 0.2824, 0.4501, 0.7193, 0.8709],
          [0.7464, 0.6443, 0.7980, 0.7193, 0.5800, 0.5864, 0.4516, 0.4212]]]],
       device='cuda:0')
tensor([[[[0.6897, 0.7622, 0.6867, 0.6382, 0.7195, 0.2303, 0.1500, 0.6160],
          [0.8530, 0.5432, 0.3343, 0.5660, 0.5361, 0.2919, 0.0958, 0.4646],
          [0.7696, 0.5265, 0.2968, 0.3709, 0.0845, 0.1704, 0.0000, 0.2524],
          [0.8006, 0.2795, 0.3325, 0.5065, 0.4074, 0.4711, 0.3870, 0.7386],
          [0.6837, 0.4618, 0.4775, 0.7062, 0.6125, 0.6939, 0.7474, 0.6716],
          [0.4502, 0.8014, 0.8331, 0.4653, 0.1029, 0.3400, 0.6130, 0.1770],
          [0.6769, 0.7928,   -inf, 0.5552, 0.2877, 0.2120, 0.2807, 0.3216],
          [0.8149, 0.8341, 1.0000, 0.8847, 0.9204, 0.8058, 0.6746, 0.8031]]]],
       device='cuda:0')
tensor([[[[0.7074, 0.7975, 0.5980, 0.4617, 0.3990, 0.5727, 0.7122, 0.5909],
          [  -inf, 0.6437, 0.1614, 0.6333, 0.6850, 0.6110, 0.7131, 0.7265],
          [0.6810, 0.5746, 0.2838, 0.4945, 0.3488, 0.2809, 0.4743, 0.8752],
          [0.4691, 0.4220, 0.4417, 0.6630, 0.5063, 0.8214, 0.8585, 0.8413],
          [0.5040, 0.3465, 0.2818, 0.8410, 0.9447, 1.0000, 0.8768, 0.6511],
          [0.0000, 0.4468, 0.5046, 0.5439, 0.7582, 0.5518, 0.7053, 0.7539],
          [0.2610, 0.4975, 0.6611, 0.3339, 0.4426, 0.6692, 0.8458, 0.8824],
          [0.7314, 0.6386, 0.7472, 0.7814, 0.7760, 0.8402, 0.6263, 0.5214]]]],
       device='cuda:0')
tensor([[[[0.8778, 0.8807, 0.5285, 0.4200, 0.5407, 0.9352, 0.9415, 0.4947],
          [0.9429, 0.7567, 0.4889, 0.7891, 0.7866, 0.8333, 1.0000, 0.7126],
          [0.5570, 0.7724, 0.7571, 0.7324, 0.5742, 0.4267, 0.6882,   -inf],
          [0.3476, 0.6209, 0.5831, 0.6885, 0.6768, 0.7961, 0.8700, 0.8456],
          [0.3403, 0.3649, 0.3081, 0.7285, 0.8687, 0.9284, 0.9026, 0.6694],
          [0.0000, 0.2872, 0.3191, 0.4926, 0.7919, 0.7358, 0.8508, 0.8122],
          [0.1142, 0.3213, 0.3886, 0.3185, 0.5522, 0.7770, 0.8610, 0.7791],
          [0.4010, 0.3683, 0.5004, 0.5485, 0.5381, 0.6682, 0.4471, 0.2881]]]],
       device='cuda:0')
tensor([[[[0.9538, 0.9187, 0.5242, 0.4175, 0.5180, 0.9756,   -inf, 0.5262],
          [1.0000, 0.7319, 0.3995, 0.7273, 0.6640, 0.7639, 0.9357, 0.6082],
          [0.5359, 0.7189, 0.6486, 0.6010, 0.3931, 0.2589, 0.4769, 0.8159],
          [0.3647, 0.5777, 0.5254, 0.6034, 0.4918, 0.6607, 0.7026, 0.7001],
          [0.3982, 0.3285, 0.2121, 0.6571, 0.6862, 0.7777, 0.7791, 0.5306],
          [0.0000, 0.3140, 0.2616, 0.3315, 0.5964, 0.5351, 0.7454, 0.7158],
          [0.2163, 0.4124, 0.4138, 0.1709, 0.3412, 0.5786, 0.7626, 0.7629],
          [0.5602, 0.4400, 0.5475, 0.5446, 0.4674, 0.5818, 0.3606, 0.2289]]]],
       device='cuda:0')
tensor([[[[0.5668, 0.6026, 0.5222, 0.5081, 0.4464, 0.7979, 0.9761, 0.7079],
          [0.8589, 0.5259, 0.2066, 0.5950, 0.5167, 0.7362, 0.8633, 0.7023],
          [0.5468, 0.5277, 0.3441, 0.4793, 0.2539, 0.3363, 0.5122, 0.8586],
          [0.3873, 0.3201, 0.3701, 0.5795, 0.4050, 0.7993, 0.8015, 0.8225],
          [0.4654, 0.3115, 0.2537, 0.7844, 0.8595, 1.0000, 0.8296, 0.6641],
          [0.0000, 0.5279, 0.4950, 0.5433, 0.8171, 0.6399, 0.7893, 0.8202],
          [0.1747, 0.4763, 0.6090, 0.2797, 0.4518, 0.7013, 0.9031,   -inf],
          [0.5490, 0.4474, 0.6563, 0.7041, 0.7151, 0.8572, 0.6409, 0.5211]]]],
       device='cuda:0')
tensor([[[[0.9136, 0.8936, 0.6292, 0.5781, 0.6369, 0.9635,   -inf, 0.7321],
          [0.9643, 0.7662, 0.5039, 0.8098, 0.7763, 0.8505, 1.0000, 0.8166],
          [0.5931, 0.7072, 0.6269, 0.6568, 0.5059, 0.4639, 0.6916, 0.9873],
          [0.4298, 0.4981, 0.4813, 0.5644, 0.4901, 0.7115, 0.7423, 0.7751],
          [0.3973, 0.3568, 0.2878, 0.6188, 0.6586, 0.7265, 0.6396, 0.5214],
          [0.0000, 0.3639, 0.3398, 0.3800, 0.6161, 0.4949, 0.6059, 0.6804],
          [0.1214, 0.3319, 0.4238, 0.1992, 0.3502, 0.5951, 0.7016, 0.6816],
          [0.4143, 0.4001, 0.5807, 0.5400, 0.4894, 0.6651, 0.4831, 0.3094]]]],
       device='cuda:0')
tensor([[[[0.7202, 0.7166, 0.5970, 0.6318, 0.5519, 0.6569, 0.7832, 0.7398],
          [1.0000, 0.5758, 0.1217, 0.6099, 0.6057, 0.7283, 0.7983, 0.7933],
          [0.6390, 0.4155, 0.1050, 0.3724, 0.2006, 0.4118, 0.5310, 0.8685],
          [0.4478, 0.0000, 0.0911, 0.4507, 0.3208, 0.8881, 0.8134, 0.7857],
          [0.4962, 0.1123, 0.0577, 0.7492, 0.9196,   -inf, 0.7132, 0.4582],
          [0.0059, 0.6797, 0.5886, 0.4414, 0.7076, 0.4968, 0.5778, 0.6027],
          [0.1951, 0.5392, 0.7401, 0.0319, 0.0569, 0.4886, 0.7271, 0.6912],
          [0.5183, 0.3325, 0.5810, 0.4581, 0.3866, 0.7073, 0.5060, 0.2986]]]],
       device='cuda:0')
tensor([[[[0.8837, 0.9080, 0.6792, 0.6509, 0.6528, 0.8219, 0.8880, 0.6343],
          [1.0000, 0.7536, 0.4603, 0.8412, 0.8282, 0.8409,   -inf, 0.6920],
          [0.6255, 0.6264, 0.5183, 0.6564, 0.5541, 0.5636, 0.6517, 0.7672],
          [0.4688, 0.4563, 0.4422, 0.4927, 0.3778, 0.7645, 0.7691, 0.6833],
          [0.4536, 0.3165, 0.2140, 0.5296, 0.5616, 0.7538, 0.6727, 0.4951],
          [0.0000, 0.3562, 0.3622, 0.3771, 0.5532, 0.4049, 0.5561, 0.6078],
          [0.1489, 0.3807, 0.5250, 0.2054, 0.2741, 0.4927, 0.6416, 0.6424],
          [0.4344, 0.3955, 0.5651, 0.5095, 0.4631, 0.6190, 0.4133, 0.2367]]]],
       device='cuda:0')
tensor([[[[0.6944, 0.6882, 0.6508, 0.7209, 0.6912, 0.8642, 0.9029, 0.7480],
          [0.8486, 0.5946, 0.3294, 0.7940, 0.8210, 0.9111, 0.8646, 0.7187],
          [0.6035, 0.5708, 0.4515, 0.6140, 0.5709, 0.7143, 0.6654, 0.8241],
          [0.5643, 0.3633, 0.5113, 0.7374, 0.5689, 1.0000, 0.9927, 0.9786],
          [0.5680, 0.4300, 0.3971, 0.8629, 0.8207, 0.9831, 0.9689, 0.8414],
          [0.0000, 0.5721, 0.5101, 0.4562, 0.6734, 0.5855, 0.8171, 0.7963],
          [0.1770, 0.5155, 0.7450, 0.3029, 0.4213, 0.8036, 0.9812, 0.8938],
          [0.5163, 0.5389, 0.8865, 0.8154, 0.7931,   -inf, 0.8134, 0.5031]]]],
       device='cuda:0')
tensor([[[[0.7037, 0.6977, 0.6355, 0.6640, 0.6887, 0.9580,   -inf, 0.8386],
          [0.7894, 0.5828, 0.3903, 0.7524, 0.7687, 0.9067, 0.9962, 0.8375],
          [0.5320, 0.5638, 0.5311, 0.6557, 0.6012, 0.6906, 0.8351, 1.0000],
          [0.4408, 0.4084, 0.5497, 0.6977, 0.5768, 0.9077, 0.9901, 0.9644],
          [0.4265, 0.3697, 0.3420, 0.7044, 0.6696, 0.7155, 0.7255, 0.6676],
          [0.0000, 0.3863, 0.3494, 0.4324, 0.6253, 0.3987, 0.5708, 0.6585],
          [0.1094, 0.3485, 0.5000, 0.2315, 0.3511, 0.5788, 0.6920, 0.6312],
          [0.3752, 0.4020, 0.6081, 0.5520, 0.5494, 0.7336, 0.4951, 0.2652]]]],
       device='cuda:0')
tensor([[[[0.3523, 0.4001, 0.5591, 0.6348, 0.5525, 0.5411, 0.7048, 0.8656],
          [0.5666, 0.3001, 0.0573, 0.4304, 0.5777, 0.7932, 0.7266, 0.7929],
          [0.5494, 0.3552, 0.1363, 0.4332, 0.4340, 0.7738, 0.7111, 0.8816],
          [0.5976, 0.0937, 0.2936, 0.6626, 0.4866,   -inf, 0.9951, 0.9407],
          [0.5807, 0.3416, 0.2639, 0.9003, 0.9253, 0.8162, 0.5473, 0.4609],
          [0.0000, 0.6387, 0.6244, 0.7662, 0.9802, 0.3982, 0.4144, 0.4704],
          [0.1984, 0.4647, 0.8893, 0.4669, 0.5129, 0.7761, 0.7840, 0.5720],
          [0.6503, 0.7040, 0.9724, 0.8260, 0.7895, 1.0000, 0.5923, 0.2428]]]],
       device='cuda:0')
tensor([[[[0.8054, 0.7895, 0.6517, 0.7225, 0.7542, 0.9399, 1.0000, 0.7844],
          [0.8154, 0.6961, 0.5670, 0.8824, 0.8727, 0.9234,   -inf, 0.7847],
          [0.5437, 0.6162, 0.6153, 0.7178, 0.7063, 0.7103, 0.7800, 0.8774],
          [0.4091, 0.4560, 0.5045, 0.6977, 0.7011, 0.8545, 0.9440, 0.9664],
          [0.3363, 0.3323, 0.2715, 0.5397, 0.6059, 0.6866, 0.7859, 0.7787],
          [0.0000, 0.2640, 0.2539, 0.3205, 0.5078, 0.4556, 0.6407, 0.6909],
          [0.0403, 0.2372, 0.3932, 0.2868, 0.4216, 0.6272, 0.7856, 0.7413],
          [0.2359, 0.3072, 0.4909, 0.4778, 0.5386, 0.7207, 0.5709, 0.3945]]]],
       device='cuda:0')
tensor([[[[0.4346, 0.4287, 0.5042, 0.6317, 0.6234, 0.8522, 1.0000, 0.8891],
          [0.5131, 0.3783, 0.2940, 0.6657, 0.7277, 0.8882, 0.9954, 0.8680],
          [0.4299, 0.4356, 0.3952, 0.6088, 0.6250, 0.7738, 0.8974,   -inf],
          [0.3825, 0.2603, 0.3549, 0.7075, 0.6738, 0.9557, 0.9957, 0.8753],
          [0.3145, 0.3070, 0.2653, 0.7466, 0.8186, 0.7558, 0.6755, 0.6159],
          [0.0000, 0.3731, 0.3750, 0.6134, 0.8875, 0.5675, 0.6064, 0.6646],
          [0.1139, 0.2421, 0.4652, 0.3900, 0.5698, 0.7672, 0.7686, 0.5960],
          [0.3477, 0.4190, 0.6285, 0.5950, 0.6156, 0.7585, 0.4999, 0.2490]]]],
       device='cuda:0')
tensor([[[[0.8215, 0.7971, 0.6295, 0.7056, 0.7897, 0.9500,   -inf, 0.7941],
          [0.8136, 0.6511, 0.5476, 0.9038, 0.9310, 0.9286, 1.0000, 0.8358],
          [0.5411, 0.5548, 0.5950, 0.8112, 0.8038, 0.7385, 0.8411, 0.9457],
          [0.3841, 0.4130, 0.4690, 0.7152, 0.7287, 0.8605, 0.9362, 0.9225],
          [0.2952, 0.2660, 0.2523, 0.6281, 0.7125, 0.7510, 0.8071, 0.7452],
          [0.0000, 0.2147, 0.2651, 0.4933, 0.7137, 0.5848, 0.7102, 0.7226],
          [0.0760, 0.2468, 0.4257, 0.3936, 0.5694, 0.7533, 0.7944, 0.6746],
          [0.2782, 0.3740, 0.5725, 0.5628, 0.6071, 0.7440, 0.5186, 0.3214]]]],
       device='cuda:0')
tensor([[[[0.8005, 0.8000, 0.6394, 0.6988, 0.7808, 0.9447, 0.9771, 0.7945],
          [0.8810, 0.6790, 0.5523, 0.9050, 0.9240, 0.9286, 1.0000, 0.8403],
          [0.6114, 0.5903, 0.6033, 0.7946, 0.7722, 0.7153, 0.8329, 0.9579],
          [0.3830, 0.4496, 0.5201, 0.7054, 0.6787, 0.8273, 0.9346, 0.9462],
          [0.2841, 0.2707, 0.2901, 0.6524, 0.6940, 0.7431, 0.8250, 0.7658],
          [0.0000, 0.1988, 0.2647, 0.5394, 0.7395,   -inf, 0.7428, 0.7405],
          [0.1084, 0.2874, 0.4746, 0.4678, 0.6412, 0.7986, 0.8392, 0.7181],
          [0.3536, 0.4778, 0.6946, 0.6813, 0.7142, 0.8298, 0.5732, 0.3738]]]],
       device='cuda:0')
tensor([[[[0.7730, 0.8216, 0.5991, 0.6332, 0.7231, 0.8934, 0.8597, 0.5937],
          [0.8904, 0.7089, 0.5621, 0.9391, 0.9244, 0.8540, 0.8593, 0.6594],
          [0.6114, 0.6505, 0.7202, 0.9432, 0.8410, 0.6829, 0.7516, 0.8587],
          [0.3673, 0.5451, 0.6979, 0.9208, 0.8524, 0.9634,   -inf, 0.9083],
          [0.2835, 0.3572, 0.4351, 0.8809, 0.9272, 0.9385, 0.9224, 0.7437],
          [0.0000, 0.3067, 0.4134, 0.7760, 0.9780, 0.7220, 0.7997, 0.7081],
          [0.1657, 0.4842, 0.7373, 0.7561, 0.9008, 0.9888, 0.9656, 0.7187],
          [0.4510, 0.6766, 0.9536, 0.9523, 0.9224, 1.0000, 0.6487, 0.3245]]]],
       device='cuda:0')
tensor([[[[0.7005, 0.7022, 0.6997, 0.7838, 0.7837, 0.9973,   -inf, 1.0000],
          [0.7959, 0.5982, 0.4794, 0.8041, 0.8086, 0.9083, 0.9372, 0.8704],
          [0.6598, 0.5763, 0.5272, 0.7001, 0.6820, 0.7400, 0.7796, 0.9235],
          [0.4308, 0.3675, 0.5445, 0.7576, 0.6939, 0.9670, 0.9950, 0.9139],
          [0.2631, 0.3152, 0.3631, 0.6764, 0.7441, 0.8094, 0.7309, 0.6674],
          [0.0000, 0.3013, 0.3270, 0.6103, 0.8639, 0.6010, 0.6052, 0.6597],
          [0.0641, 0.1937, 0.4498, 0.4363, 0.6216, 0.7829, 0.7918, 0.6626],
          [0.2322, 0.3924, 0.6287, 0.5619, 0.6490, 0.8410, 0.6159, 0.3707]]]],
       device='cuda:0')
tensor([[[[0.6759, 0.7417, 0.7812, 0.8823, 0.8642, 0.9904,   -inf, 0.9607],
          [0.8348, 0.6016, 0.5092, 0.9156, 0.9154, 0.8669, 0.7863, 0.7869],
          [0.6965, 0.6004, 0.5974, 0.8502, 0.7791, 0.7472, 0.7095, 0.8757],
          [0.5019, 0.4678, 0.6981, 0.8956, 0.7266, 0.9977, 1.0000, 0.8813],
          [0.3658, 0.3923, 0.4571, 0.8111, 0.8087, 0.7935, 0.6643, 0.5808],
          [0.0000, 0.3747, 0.4749, 0.7486, 0.9394, 0.5424, 0.5091, 0.5585],
          [0.0844, 0.2916, 0.6234, 0.5055, 0.6321, 0.7223, 0.6792, 0.5409],
          [0.2819, 0.4393, 0.6603, 0.5913, 0.6570, 0.7370, 0.4444, 0.2193]]]],
       device='cuda:0')
Traceback (most recent call last):
  File "/home/patrick/Documents/SPUR/RL_Models/Smaller_Baseline/main.py", line 15, in <module>
    m.learn(10000)
  File "/home/patrick/Documents/SPUR/RL_Models/Smaller_Baseline/R_Learning.py", line 91, in learn
    self.rollout()
  File "/home/patrick/Documents/SPUR/RL_Models/Smaller_Baseline/R_Learning.py", line 121, in rollout
    action = self.sample_action() #Gets the action stores from the last observed action'
  File "/home/patrick/Documents/SPUR/RL_Models/Smaller_Baseline/R_Learning.py", line 205, in sample_action
    action_ = self.predict(last_obs)
  File "/home/patrick/Documents/SPUR/RL_Models/Smaller_Baseline/R_Learning.py", line 225, in predict
    action = [(int(self.actor.choose_travel(last_observation)[1] / self.gridSize), int(self.actor.choose_travel(last_observation)[1] % self.gridSize))]
  File "/home/patrick/Documents/SPUR/RL_Models/Smaller_Baseline/model.py", line 181, in choose_travel
    wandb.log({"Decoder Output" : [wandb.Image(x_normalized, caption=f"Noisy Image")]})
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_run.py", line 449, in wrapper
    return func(self, *args, **kwargs)
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_run.py", line 400, in wrapper_fn
    return func(self, *args, **kwargs)
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_run.py", line 390, in wrapper
    return func(self, *args, **kwargs)
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_run.py", line 1871, in log
    self._log(data=data, step=step, commit=commit)
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_run.py", line 1635, in _log
    self._partial_history_callback(data, step, commit)
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_run.py", line 1507, in _partial_history_callback
    self._backend.interface.publish_partial_history(
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/interface/interface.py", line 600, in publish_partial_history
    data = history_dict_to_json(run, data, step=user_step, ignore_copy_err=True)
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/data_types/utils.py", line 52, in history_dict_to_json
    payload[key] = val_to_json(
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/data_types/utils.py", line 125, in val_to_json
    return items[0].seq_to_json(items, run, key, namespace)
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/data_types/image.py", line 557, in seq_to_json
    if _server_accepts_image_filenames():
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/data_types/image.py", line 37, in _server_accepts_image_filenames
    if util._is_offline():
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/util.py", line 1713, in _is_offline
    wandb.run is not None and wandb.run.settings._offline
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_run.py", line 390, in wrapper
    return func(self, *args, **kwargs)
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_run.py", line 923, in settings
    cp = self._settings.copy()
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_settings.py", line 1423, in copy
    return self.__copy__()
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_settings.py", line 1387, in __copy__
    new = Settings()
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_settings.py", line 1304, in __init__
    elif isinstance(validator, Sequence):
  File "/usr/lib/python3.10/typing.py", line 994, in __instancecheck__
    return self.__subclasscheck__(type(obj))
  File "/usr/lib/python3.10/typing.py", line 1158, in __subclasscheck__
    return issubclass(cls, self.__origin__)
  File "/usr/lib/python3.10/abc.py", line 121, in __subclasscheck__
    def __subclasscheck__(cls, subclass):
KeyboardInterrupt
Traceback (most recent call last):
  File "/home/patrick/Documents/SPUR/RL_Models/Smaller_Baseline/main.py", line 15, in <module>
    m.learn(10000)
  File "/home/patrick/Documents/SPUR/RL_Models/Smaller_Baseline/R_Learning.py", line 91, in learn
    self.rollout()
  File "/home/patrick/Documents/SPUR/RL_Models/Smaller_Baseline/R_Learning.py", line 121, in rollout
    action = self.sample_action() #Gets the action stores from the last observed action'
  File "/home/patrick/Documents/SPUR/RL_Models/Smaller_Baseline/R_Learning.py", line 205, in sample_action
    action_ = self.predict(last_obs)
  File "/home/patrick/Documents/SPUR/RL_Models/Smaller_Baseline/R_Learning.py", line 225, in predict
    action = [(int(self.actor.choose_travel(last_observation)[1] / self.gridSize), int(self.actor.choose_travel(last_observation)[1] % self.gridSize))]
  File "/home/patrick/Documents/SPUR/RL_Models/Smaller_Baseline/model.py", line 181, in choose_travel
    wandb.log({"Decoder Output" : [wandb.Image(x_normalized, caption=f"Noisy Image")]})
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_run.py", line 449, in wrapper
    return func(self, *args, **kwargs)
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_run.py", line 400, in wrapper_fn
    return func(self, *args, **kwargs)
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_run.py", line 390, in wrapper
    return func(self, *args, **kwargs)
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_run.py", line 1871, in log
    self._log(data=data, step=step, commit=commit)
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_run.py", line 1635, in _log
    self._partial_history_callback(data, step, commit)
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_run.py", line 1507, in _partial_history_callback
    self._backend.interface.publish_partial_history(
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/interface/interface.py", line 600, in publish_partial_history
    data = history_dict_to_json(run, data, step=user_step, ignore_copy_err=True)
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/data_types/utils.py", line 52, in history_dict_to_json
    payload[key] = val_to_json(
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/data_types/utils.py", line 125, in val_to_json
    return items[0].seq_to_json(items, run, key, namespace)
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/data_types/image.py", line 557, in seq_to_json
    if _server_accepts_image_filenames():
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/data_types/image.py", line 37, in _server_accepts_image_filenames
    if util._is_offline():
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/util.py", line 1713, in _is_offline
    wandb.run is not None and wandb.run.settings._offline
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_run.py", line 390, in wrapper
    return func(self, *args, **kwargs)
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_run.py", line 923, in settings
    cp = self._settings.copy()
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_settings.py", line 1423, in copy
    return self.__copy__()
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_settings.py", line 1387, in __copy__
    new = Settings()
  File "/home/patrick/.local/lib/python3.10/site-packages/wandb/sdk/wandb_settings.py", line 1304, in __init__
    elif isinstance(validator, Sequence):
  File "/usr/lib/python3.10/typing.py", line 994, in __instancecheck__
    return self.__subclasscheck__(type(obj))
  File "/usr/lib/python3.10/typing.py", line 1158, in __subclasscheck__
    return issubclass(cls, self.__origin__)
  File "/usr/lib/python3.10/abc.py", line 121, in __subclasscheck__
    def __subclasscheck__(cls, subclass):
KeyboardInterrupt